# -*- coding: utf-8 -*-
"""ipmlab(CSI) 전처리

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17euynNIIjpFlXVS_F4OQMZVOR1wI88hw
"""

import pandas as pd
import numpy as np
from collections import Counter
from datetime import datetime
import csv
import openpyxl
from collections import defaultdict
from datetime import datetime

!pip install -U imbalanced-learn

path = "/content/drive/MyDrive/ipm/CSI_2022_raw.xlsx"
path2='/content/drive/MyDrive/ipm/CSI_2022_preprocessed.xlsx'

df = pd.read_excel(path)
df_pre = pd.read_excel(path2, sheet_name='CSI_분석_DATA(ALL)')

#데이터 전처리 함수

def filter_data_dic(df, required_keys):
    dict_df = df.to_dict(orient='index')
    double_dict = {}
    new_dict = {}
    new_dict2 = {}
    new_dict3= {}

    for i in dict_df:
        key = dict_df[i]['사고번호']
        value = {}
        for j in dict_df[i]:
            if j != '사고번호':
                value[j] = dict_df[i][j]
        double_dict[key] = value

    for key in double_dict:
        if double_dict[key]['사고상태'] in ['확인완료', '확인 및 접수']:
            new_dict[key] = double_dict[key]

    for key, sub_dict in new_dict.items():
        if all(sub_dict.get(sub_key) != "미입력" for sub_key in required_keys):
            new_dict2[key] = sub_dict

    for key, sub_dict in new_dict2.items():
        if all(sub_dict.get(sub_key) != "미입력" for sub_key in ["인적사고종류"]):
            new_dict3[key] = sub_dict

    return new_dict3

required_keys = ['공공민간구분','공종(대분류)','공사비','공종(소분류)','날씨','온도','습도',
                '시설물대분류','시도구분','안전관리계획','공정율','작업자수','프로세스','설계안정성검토','사고일시']

sample_data_result = filter_data_dic(df, required_keys)

#변수 전처리 함수

def filter_feature_dic(sample_data_result,continuous_exception_keys,prediction_required_keys):
    new_dict4 = {}
    new_dict5 = {}
    total_rows = len(sample_data_result)
    keys_to_delete = []
    to_remove = set()


    for sub_key in sample_data_result[202000004639].keys():
        num_missing_values = 0
        for key in sample_data_result:
            if sample_data_result[key][sub_key] == "미입력":
                num_missing_values += 1
        if num_missing_values / total_rows > 0.15:
            continue
        for main_key in sample_data_result:
            if main_key not in new_dict4:
                new_dict4[main_key] = {}
            new_dict4[main_key][sub_key] = sample_data_result[main_key][sub_key]


    total_rows = len(new_dict4)
    keys_to_delete = []

    for sub_key in new_dict4[202000004639].keys():
        num_missing_values = 0
        for key in new_dict4:
            if new_dict4[key][sub_key] is np.nan:
                num_missing_values += 1
        if num_missing_values / total_rows > 0.15:
            continue
        for main_key in new_dict4:
            if main_key not in new_dict5:
                new_dict5[main_key] = {}
            new_dict5[main_key][sub_key] = new_dict4[main_key][sub_key]

    # subkey의 value값들을 저장하는 defaultdict
    key_value_counts = defaultdict(set)

    for key, values in new_dict5.items():
        for subkey, value in values.items():
            key_value_counts[subkey].add(value)

    for subkey, values in key_value_counts.items():
        # subkey의 value값 종류 수가 50개 이상인 경우
        if len(values) >= 50 and subkey not in continuous_exception_keys and subkey not in prediction_required_keys:
            to_remove.add(subkey)

      # 딕셔너리에서 삭제할 subkey를 제거
    for key, values in new_dict5.items():
        for subkey in to_remove:
            values.pop(subkey, None)

    to_remove=set()
    to_remove.update(['사고유발주체','사고유발주체-발주자','사고유발주체-설계자','사고유발주체-시공자','사고유발주체-감리자','사고유발주체-작업자'])

    for key, values in new_dict5.items():
        for subkey in to_remove:
            values.pop(subkey, None)

    return new_dict5

continuous_exception_keys = {'사고일시', '온도','습도'}
prediction_required_keys = {'사고객체(소분류)'}

fillter_feature_result=filter_feature_dic(sample_data_result,continuous_exception_keys,prediction_required_keys)

#변수 추가 함수

def add_feature_dic(fillter_feature_result):
    result={}

    for key, value in fillter_feature_result.items():
        if value['사망자'] >= 1:
            value['사망_부상여부'] = 'Y'
        else:
            value['사망_부상여부'] = 'N'


    for key1, value1 in fillter_feature_result.items():
        if isinstance(value1, dict):
            for key2, value2 in value1.items():
                if '-' in value2:
                    result[key1] = value2.split('-')[1]
                    break

    for key, value in fillter_feature_result.items():
        value['사고월']=result[key]+"월"


 # "사고일시" 컬럼에서 요일 정보 추출하여 "사고요일" 컬럼 추가

    for main_key in fillter_feature_result:
        accident_date = fillter_feature_result[main_key]['사고일시']
        accident_datetime = datetime.strptime(accident_date, '%Y-%m-%d %H:%M:%S')
        accident_weekday = accident_datetime.strftime('%A')

        fillter_feature_result[main_key]['사고요일'] = accident_weekday

    for key, value in fillter_feature_result.items():
        accident_date = value['사고일시']
        accident_datetime = datetime.strptime(accident_date, '%Y-%m-%d %H:%M:%S')
        accident_hour = accident_datetime.hour

        if 0 <= accident_hour < 6:
            value['사고시간'] = "00-06"
        elif 6 <= accident_hour < 8:
            value['사고시간'] = "06-08"
        elif 8 <= accident_hour < 10:
            value['사고시간'] = "08-10"
        elif 10 <= accident_hour < 12:
            value['사고시간'] = "10-12"
        elif 12 <= accident_hour < 14:
            value['사고시간'] = "12-14"
        elif 14 <= accident_hour < 16:
            value['사고시간'] = "14-16"
        elif 16 <= accident_hour < 18:
            value['사고시간'] = "16-18"
        elif 18 <= accident_hour < 20:
            value['사고시간'] = "18-20"
        elif 20 <= accident_hour < 24:
            value['사고시간'] = "20-24"

    return fillter_feature_result

add_feature_result=add_feature_dic(fillter_feature_result)

#데이터 비교 후 변수 제거 함수

def comparison_data_dic(add_feature_result):
    dict_df2 = df_pre.to_dict(orient='index')
    double_dict2 = {}
    missing_keys = set()

    for i in dict_df2:
        key = dict_df2[i]['사고번호']
        value = {}
        for j in dict_df2[i]:
            if j != '사고번호':
                value[j] = dict_df2[i][j]
        double_dict2[key] = value

    # dic1에서 dic2에는 존재하지 않는 서브키를 구합니다.
    for key, sub_dict in add_feature_result.items():
        if key in double_dict2:
            missing_keys.update(sub_key for sub_key in sub_dict.keys() if sub_key not in double_dict2[key])

    missing_keys = list(missing_keys)
    keys_to_remove = missing_keys

    # dic1의 각 메인키에 대해 keys_to_remove에 해당하는 서브키를 삭제합니다.
    for key, sub_dict in add_feature_result.items():
        for sub_key in keys_to_remove:
            if sub_key in sub_dict:
                del sub_dict[sub_key]

    return add_feature_result

final_result=comparison_data_dic(add_feature_result)